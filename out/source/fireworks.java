/* autogenerated by Processing revision 1292 on 2024-03-02 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class fireworks extends PApplet {

int backgroundColor = 0;
Button button;

public void setup() {
    /* size commented out by preprocessor */;
    button = new Button("start", width-120, 20);
}

public void draw() {
    background(backgroundColor);

    // particle.update();
    // particle.show();
    button.show();
}
class Button {
    int x, y, w, h, r, s, fillC, strokeC; // r: rounded corner, s: textSize
    float textDesc; // correction for vertical alignment
    String txt;
    boolean pressed;

    Button() { // default constructor
        txt = "Button";
        x = 0;
        y = 0;
        w = 100;
        h = 40;
        r = 5;
        s = 30;
        fillC = 0;
        strokeC = 255;
        textSize(s);
        textDesc = 0.6f * textDescent();
    }

    Button(String buttonText, int x, int y) {
        this();
        txt = buttonText;
        this.x = x;
        this.y = y;
    }

    public boolean inside() {
        return mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h;
    }

    public void press() {
        pressed = true;
        fillC = 100;
    }

    public void release() {
        fillC = 0;
        pressed = false;
    }

    public void pressedInOut() {
        fillC = 0;
    }

    public void pressedOutIn() {
        fillC = 100;
    }

    public void show() {
        stroke(strokeC);
        strokeWeight(2);
        fill(fillC);
        rect(x, y, w, h, r);

        textAlign(CENTER, CENTER);
        textSize(s);
        fill(255);
        text(txt, x + w/2, y + h/2 - textDesc);

        strokeWeight(1);

        // next line is to check middle of text for vertical alignment
        // line(x, y + h/2, x + w, y + h/2);
    }
}
public void mousePressed() {
    if (button.inside()) button.press();
}

public void mouseReleased() {
    if (button.pressed) {
        button.release();
        
        if (button.inside()) {
            // clicked button: action here
            println("click");
        }
    }
}

//  && button.inside()) {
        // button action here
        // button.release();

public void mouseDragged() {
    // if (mouseButton == 37 && button.pressed) {
    //     if (!button.inside()) button.pressedInOut();
    //     else button.pressedOutIn();
    // }
}
class Particle {
    PVector pos, vel, acc;
    int colour = color(255);
    int size = 10;

    Particle(float x, float y) {
        pos = new PVector(x, y);
        vel = new PVector();
        acc = new PVector();
    }

    public void applyForce(PVector force) {
        // F = M * A (force = mass * acceleration) Mass ommited for now
        acc.add(force);
    }

    public void update() {
        vel.add(acc);
        pos.add(vel);
    }

    public void show() {
        stroke(colour);
        strokeWeight(size);
        point(pos.x, pos.y);
    }
}


  public void settings() { size(800, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "fireworks" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
